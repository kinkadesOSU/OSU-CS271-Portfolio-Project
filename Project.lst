Microsoft (R) Macro Assembler Version 14.27.29112.0	    12/08/20 07:01:41
<Designing low-level I/O procedures      (Proj6-kinkades.asm  Page 1 - 1


				TITLE Designing low-level I/O procedures      (Proj6-kinkades.asm)

				; Author: Sam Kinkade
				; Last Modified: December 3rd, 2020
				; OSU email address: kinkades@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: 6                 Due Date: December 6th, 2020
				; Description: This file takes 10 inputs from the user, validates them for size / number / sign, prints out the numbers, and returns the sum and average of them. 
				; This is accomplished via macros and without the aid of ReadInt, ReadDec, WriteInt, or WriteDec

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; (insert macro definitions here)
				mGetString MACRO printMe, size_of_printMe

					PUSH	ECX
					PUSH	EDX
					MOV		EDX, OFFSET printMe
					MOV		ECX, SIZEOF	printME
					CALL	ReadString
					POP		EDX
					POP		ECX

				ENDM

				; Macro to write a string
				mDisplayString MACRO buffer
					PUSH	EDX 
					MOV		EDX,  buffer
					CALL	WriteString
					POP		EDX
				ENDM

				; (insert constant definitions here)
 = 0000001E			MAX_LENGTH = 30 ; 10 digits + a sign + null terminator

 00000000			.data

				; (insert variable definitions here)
 00000000 50 52 4F 47 52	intro1						BYTE	"PROGRAMMING ASSIGNMENT 6: Designing low-level I/O procedures",0								; opening statement to user
	   41 4D 4D 49 4E
	   47 20 41 53 53
	   49 47 4E 4D 45
	   4E 54 20 36 3A
	   20 44 65 73 69
	   67 6E 69 6E 67
	   20 6C 6F 77 2D
	   6C 65 76 65 6C
	   20 49 2F 4F 20
	   70 72 6F 63 65
	   64 75 72 65 73
	   00
 0000003D 57 72 69 74 74	intro2						BYTE	"Written byte: Sam Kinkade",0
	   65 6E 20 62 79
	   74 65 3A 20 53
	   61 6D 20 4B 69
	   6E 6B 61 64 65
	   00

 00000057 50 6C 65 61 73	instruction1				BYTE	"Please provide 10 signed decimal integers.",0
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 73 69
	   67 6E 65 64 20
	   64 65 63 69 6D
	   61 6C 20 69 6E
	   74 65 67 65 72
	   73 2E 00
 00000082 45 61 63 68 20	instruction2				BYTE	"Each number needs to be small enough to fit inside a 32 bit register. After",0
	   6E 75 6D 62 65
	   72 20 6E 65 65
	   64 73 20 74 6F
	   20 62 65 20 73
	   6D 61 6C 6C 20
	   65 6E 6F 75 67
	   68 20 74 6F 20
	   66 69 74 20 69
	   6E 73 69 64 65
	   20 61 20 33 32
	   20 62 69 74 20
	   72 65 67 69 73
	   74 65 72 2E 20
	   41 66 74 65 72
	   00
 000000CE 79 6F 75 20 68	instruction3				BYTE	"you have finished inputting the raw numbers I will display a list of the integers,",0
	   61 76 65 20 66
	   69 6E 69 73 68
	   65 64 20 69 6E
	   70 75 74 74 69
	   6E 67 20 74 68
	   65 20 72 61 77
	   20 6E 75 6D 62
	   65 72 73 20 49
	   20 77 69 6C 6C
	   20 64 69 73 70
	   6C 61 79 20 61
	   20 6C 69 73 74
	   20 6F 66 20 74
	   68 65 20 69 6E
	   74 65 67 65 72
	   73 2C 00
 00000121 74 68 65 69 72	instruction4				BYTE	"their sum, and their average value.",0
	   20 73 75 6D 2C
	   20 61 6E 64 20
	   74 68 65 69 72
	   20 61 76 65 72
	   61 67 65 20 76
	   61 6C 75 65 2E
	   00
 00000145 54 68 61 6E 6B	goodbye						BYTE	"Thanks for playing!",0
	   73 20 66 6F 72
	   20 70 6C 61 79
	   69 6E 67 21 00

 00000159 50 6C 65 61 73	enter_instruction			BYTE	"Please enter a signed number: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   00
 00000178 45 52 52 4F 52	error_message1				BYTE	"ERROR: You did not enter a signed number, or your number was too big.",0
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 20 73 69 67
	   6E 65 64 20 6E
	   75 6D 62 65 72
	   2C 20 6F 72 20
	   79 6F 75 72 20
	   6E 75 6D 62 65
	   72 20 77 61 73
	   20 74 6F 6F 20
	   62 69 67 2E 00
 000001BE 50 6C 65 61 73	error_message2				BYTE	"Please try again: ",0
	   65 20 74 72 79
	   20 61 67 61 69
	   6E 3A 20 00

 000001D1 59 6F 75 20 65	result_prompt				BYTE	"You entered the following numbers: ",0
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 20
	   00
 000001F5 54 68 65 20 73	sum_prompt					BYTE	"The sum of these numbers is: ",0
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 20 00
 00000213 54 68 65 20 72	avg_prompt					BYTE	"The rounded average is: ",0
	   6F 75 6E 64 65
	   64 20 61 76 65
	   72 61 67 65 20
	   69 73 3A 20 00

 0000022C  0000000A [		user_input_array			BYTE	10 DUP(?),0
	    00
	   ] 00

				;-----------------ReadVal-----------------
				;input_accumulator			BYTE	MAX_LENGTH DUP(?)
 00000237  00000015 [		BUFFER						BYTE	21 DUP(0)
	    00
	   ]
 0000024C 00000000		byteCount					DWORD	?

				;-----------------WriteVal-----------------
 00000250  0000001E [		int_string					BYTE	MAX_LENGTH DUP(?),0
	    00
	   ] 00
 0000026F 00000000		sign_indicator				DWORD	0						; need a boolean to tell us which sign the number is. Can't use the sign flag since it's controlled by the system. Assume it's a positive number to start (makes life easier)
 00000273 2C 20 00		spacer						BYTE	", ",0

 00000000			.code
 00000000			main PROC

				; (insert executable instructions here)
				; introduce the program to the user
 00000000  68 00000000 R	PUSH	offset	intro1
 00000005  68 0000003D R	PUSH	offset	intro2
 0000000A  68 00000057 R	PUSH	offset	instruction1
 0000000F  68 00000082 R	PUSH	offset	instruction2
 00000014  68 000000CE R	PUSH	offset	instruction3
 00000019  68 00000121 R	PUSH	offset	instruction4
 0000001E  E8 00000091		CALL	introduction


				; read in the user's value
 00000023  B9 0000000A		MOV		ECX, 10						; accept 10 strings
 00000028			_inputLoop:

 00000028  68 0000022C R		PUSH	OFFSET	user_input_array
 0000002D  68 00000178 R		PUSH	OFFSET	error_message1
 00000032  68 000001BE R		PUSH	OFFSET	error_message2
 00000037  68 00000159 R		PUSH	OFFSET	enter_instruction
 0000003C  68 00000237 R		PUSH	OFFSET	BUFFER
 00000041  6A 15			PUSH	SIZEOF	BUFFER
 00000043  E8 000000C8			CALL	ReadVal	

					
 00000048  E8 00000000 E	CALL	CrLf

 0000004D  68 00000273 R	PUSH	OFFSET spacer
 00000052  FF 35 0000026F R	PUSH	sign_indicator				; to flip the sign
 00000058  68 00000250 R	PUSH	OFFSET int_string			; address to place the converted integer
 0000005D  68 000001D1 R	PUSH	OFFSET result_prompt
 00000062  68 0000022C R	PUSH	OFFSET user_input_array		; has number to convert
 00000067  E8 0000027D		CALL	print_results

				; calculate the sum
 0000006C  68 00000250 R	PUSH	OFFSET	int_string
 00000071  68 000001F5 R	PUSH	OFFSET	sum_prompt
				;PUSH	OFFSET	avg_prompt
 00000076  68 0000022C R	PUSH	OFFSET	user_input_array	; array to sum
 0000007B  E8 000001AE		CALL	calculate_sum

				; calculate the average
 00000080  68 00000250 R	PUSH	OFFSET	int_string
 00000085  68 00000213 R	PUSH	OFFSET	avg_prompt
 0000008A  68 0000022C R	PUSH	OFFSET	user_input_array	; array to average
 0000008F  E8 00000219		CALL	calculate_avg

 00000094  E8 00000000 E	CALL	CrLf
 00000099  E8 00000000 E	CALL	CrLf

				;say goodbye
 0000009E  68 00000145 R	PUSH	offset	goodbye
 000000A3  E8 00000296		CALL	say_goodbye
 000000A8  E8 00000000 E	CALL	CrLf
					Invoke ExitProcess,0	; exit to operating system
 000000AD  6A 00	   *	    push   +000000000h
 000000AF  E8 00000000 E   *	    call   ExitProcess
 000000B4			main ENDP

				; (insert additional procedures here)
				;_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
				; Name: introduction

				; This procedure introduces the program to the user. It also gives the user instructions for the program

				; Preconditions: All messages have been declared

				; Postconditions: Stack is cleared. User has been informed

				; Receives: The address of the introduction and instruction messages

				; Returns: Nothing
				;_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 000000B4			introduction PROC
 = [EBP + 28]				INTRO_1				EQU		[EBP + 28]
 = [EBP + 24]				INTRO_2				EQU		[EBP + 24]
 = [EBP + 20]				INSTRUCTION_1		EQU		[EBP + 20]
 = [EBP + 16]				INSTRUCTION_2		EQU		[EBP + 16]
 = [EBP + 12]				INSTRUCTION_3		EQU		[EBP + 12]
 = [EBP + 8]				INSTRUCTION_4		EQU		[EBP + 8]

 000000B4  55				PUSH	EBP						; store stack frame reference
 000000B5  8B EC			MOV		EBP, ESP		
 000000B7  8B 55 1C			MOV		EDX, INTRO_1
 000000BA  E8 00000000 E		CALL	WriteString
 000000BF  E8 00000000 E		CALL	CrLf
 000000C4  8B 55 18			MOV		EDX, INTRO_2
 000000C7  E8 00000000 E		CALL	WriteString
 000000CC  E8 00000000 E		CALL	CrLf
 000000D1  E8 00000000 E		CALL	CrLf
 000000D6  8B 55 14			MOV		EDX, INSTRUCTION_1
 000000D9  E8 00000000 E		CALL	WriteString
 000000DE  E8 00000000 E		CALL	CrLf
 000000E3  8B 55 10			MOV		EDX, INSTRUCTION_2
 000000E6  E8 00000000 E		CALL	WriteString
 000000EB  E8 00000000 E		CALL	CrLf
 000000F0  8B 55 0C			MOV		EDX, INSTRUCTION_3
 000000F3  E8 00000000 E		CALL	WriteString
 000000F8  E8 00000000 E		CALL	CrLf
 000000FD  8B 55 08			MOV		EDX, INSTRUCTION_4
 00000100  E8 00000000 E		CALL	WriteString
 00000105  E8 00000000 E		CALL	CrLf

					; clean up stack
 0000010A  8B E5			mov		ESP, EBP
 0000010C  5D				pop		EBP
 0000010D  C2 0018			ret		24

 00000110			introduction ENDP

				;_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
				; Name: ReadVal

				; This procedure reads a string from the user, converts it to an integer (the long way), and stores the resulting integer in an array 10 times.
				; An error is printed if the string can't be converted, and the user is given an opportunity to try again

				; Preconditions: All messages and arrays have been declared

				; Postconditions: Stack is cleared. 10 strings have been input, converted to an integer, and stored

				; Receives: The address of the storage location, offsets to the error messages, and a buffer ReadString

				; Returns: Nothing
				;_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 00000110			ReadVal PROC

 = [EBP + 28]				LIST_OF_NUMBERS				EQU [EBP + 28]
 = [EBP + 24]				ERROR1						EQU [EBP + 24]
 = [EBP + 20]				ERROR2						EQU	[EBP + 20]
 = [EBP + 16]				USER_INSTRUCTION			EQU [EBP + 16]
 = [EBP + 12]				STRING_BUFFER				EQU [EBP + 12]
 = [EBP + 8]				SIZEOF_STRING_BUFFER		EQU [EBP + 8]

 00000110  55				PUSH	EBP								; store stack frame reference
 00000111  8B EC			MOV		EBP, ESP
					
 00000113  8B 5D 1C			MOV		EBX, LIST_OF_NUMBERS
					
 00000116  55				PUSH	EBP								; save stack pointer because EBP is going to be used later
 00000117  53				PUSH	EBX								; pushes first location of the array to write numbers into

 00000118  B9 0000000A			MOV		ECX, 10							; loop counter to get 10 strings
					
 0000011D				_enterValue:
 0000011D  51					PUSH	ECX							; save loop counter
						; give the user some instructions
 0000011E  8B 55 10				MOV		EDX, USER_INSTRUCTION
 00000121  E8 00000000 E			CALL	WriteString

						; set up registers and read the value (MACRO)
 00000126  8B 55 0C				MOV		EDX, STRING_BUFFER
 00000129  8B 4D 08				MOV		ECX, SIZEOF_STRING_BUFFER
 0000012C  E8 00000000 E			CALL	ReadString					; gets the user's number as a string (need to convert to an int)
 00000131  8B C8				MOV		ECX, EAX					; moves number of bytes into ECX for the conversion steps
 00000133  8B 75 0C				MOV		ESI, STRING_BUFFER			; moves the string to ESI so LODSB can iterate through it

				;		mGetString	STRING_BUFFER, SIZEOF_STRING_BUFFER

						; convert string to int
 00000136  AC					LODSB								; puts a byte in AL
 00000137  8A D0				MOV		dl, al						; preserve the character so we can use EAX later
 00000139  BD 00000001				MOV		EBP, 1						; assume the number is positive to begin with. Logic get's complicated to have the default later on	
						
 0000013E					_checkNegative:
 0000013E  80 FA 2D					CMP		dl, '-'
 00000141  75 09					JNE		_checkPositive
 00000143  BD FFFFFFFF					MOV		EBP, -1

 00000148  AC						LODSB							; load the next digit
 00000149  8A D0					MOV		dl, al					; preserve the character so we can use EAX later
 0000014B  49						DEC		ECX						; ECX would've had the length of the digit plus 1 for the sign. We need to ignore that
						
 0000014C					_checkPositive:
 0000014C  80 FA 2B					CMP		dl, "+"
 0000014F  75 09					JNE		_noSignIndicated		; assume the number is positive if the user didn't specify
 00000151  BD 00000001					MOV		EBP, 1					
							
 00000156  AC						LODSB							; load the next digit
 00000157  8A D0					MOV		dl, al					; preserve the character so we can use EAX later
 00000159  49						DEC		ECX						; ECX would've had the length of the digit plus 1 for the sign. We need to ignore that
						
 0000015A					_noSignIndicated:
 0000015A  80 FA 30					CMP		dl, '0'
 0000015D  72 59					JB		_errorMessage
 0000015F  80 FA 39					CMP		dl, '9'
 00000162  77 54					JA		_errorMessage

							; shuffle the stack to get values in the proper position
 00000164  5B						POP		EBX						; has loop counter from stack
 00000165  5F						POP		EDI						; location of array to store numbers
 00000166  58						POP		EAX						; get the stack pointer off the stack
 00000167  53						PUSH	EBX						; shuffle loop counter on the stack
 00000168  55						PUSH	EBP						; +/- 1
 00000169  57						PUSH	EDI						; location of array to store numbers

 0000016A  50						PUSH	EAX						; has our stack pointer, but is also being used for the calculation
 0000016B  BD 00000000					MOV		EBP, 0					; use EBP for calc because EAX is locked up
 00000170  B8 00000000					MOV		EAX, 0
 00000175  BB 0000000A					MOV		EBX, 10

 0000017A					_conversionLoop:			
							; passes sign checks. This loop then iterates through each character. Need to verify that the character is a digit so we can convert the character to a digit
							; check new digit
 0000017A  80 FA 30					CMP		dl, '0'
 0000017D  72 5F					JB		_invalidCharacter
 0000017F  80 FA 39					CMP		dl, '9'
 00000182  77 5A					JA		_invalidCharacter
							
							; convert
 00000184  83 E2 0F					AND		EDX, 0Fh
 00000187  52						PUSH	EDX								; save EDX because IMUL messes with it. EDX contains the digit being converted
 00000188  8B C5					MOV		EAX, EBP						; EBP has 0 on the first pass. It then increases by a factor for 10 each round
 0000018A  F7 EB					IMUL	EBX								; EAX = EAX * EBX
 0000018C  5A						POP		EDX								; bring EDX back
						
 0000018D  70 74					JO		_overflow						; check if EDX has overflowed (result of the multiplication by 10)
 0000018F  8B E8					MOV		EBP, EAX
 00000191  03 EA					add		EBP, EDX						; bring pointer back
 00000193  70 6E					JO		_overflow						; checks if EBP has overflowed (has the result)
 00000195  AC						LODSB									; load character to al
 00000196  8A D0					MOV		dl, al							; LODSB puts the byte in al, but the loop uses EDX, so the byte needs to be in dl		
 00000198  E2 E0					LOOP	_conversionLoop
							
 0000019A  8B C5				MOV		EAX, EBP							; EBP has been holding the result, but EAX will need it for WriteInt

 0000019C  5D					POP		EBP									; stack pointer
 0000019D  8B FD				MOV		EDI, EBP							; preserve EBP because EBP is going to be used
 0000019F  5B					POP		EBX									; location of array to store numbers
 000001A0  5D					POP		EBP									; EBP should have the +/- 1
 000001A1  F7 ED				IMUL	EBP									; EAX * EBP ( +/- 1)
 000001A3  8B EF				MOV		EBP, EDI							; restore stack pointer to EBP
						
						; store the digit
 000001A5  8B FB				MOV		EDI, EBX							; offset to address of array that will hold the ten
 000001A7  89 07				MOV		[EDI], EAX
 000001A9  83 C7 04				ADD		EDI, 4
							
 000001AC  59					POP		ECX									; restore outer loop counter
 000001AD  55					PUSH	EBP									; holds stack pointer
 000001AE  57					PUSH	EDI
 000001AF  49					DEC		ECX
 000001B0  0F 85 FFFFFF67			JNZ		_enterValue

 000001B6  EB 70				JMP		_endProcedure

 000001B8				_errorMessage:
					; print error message
 000001B8  59					POP		ECX									; loop counter
 000001B9  5F					POP		EDI									; save location

 000001BA  58					POP		EAX									; get stack pointer off
 000001BB  8B E8				MOV		EBP, EAX							; move to EBP for the local variables
 000001BD  8B 55 18				MOV		EDX, ERROR1
 000001C0  E8 00000000 E			CALL	WriteString
 000001C5  E8 00000000 E			CALL	CrLf
 000001CA  8B 55 14				MOV		EDX, ERROR2 
 000001CD  E8 00000000 E			CALL	WriteString
 000001D2  E8 00000000 E			CALL	CrLf
					
						; set up stack for another try
 000001D7  55					PUSH	EBP									; stack pointer							
 000001D8  57					PUSH	EDI									; save location
 000001D9  E9 FFFFFF3F				JMP		_enterValue

 000001DE				_invalidCharacter:
 000001DE  5D					POP		EBP									; stack pointer
 000001DF  5F					POP		EDI									; save location
 000001E0  59					POP		ECX									; + / -1
 000001E1  59					POP		ECX									; loop counter

 000001E2  8B 55 18				MOV		EDX, ERROR1
 000001E5  E8 00000000 E			CALL	WriteString
 000001EA  E8 00000000 E			CALL	CrLf
 000001EF  8B 55 14				MOV		EDX, ERROR2 
 000001F2  E8 00000000 E			CALL	WriteString
 000001F7  E8 00000000 E			CALL	CrLf

						; set up stack for another try
 000001FC  55					PUSH	EBP									; stack pointer							
 000001FD  57					PUSH	EDI									; save location
 000001FE  E9 FFFFFF1A				JMP		_enterValue

					
 00000203				_overflow:
 00000203  5D					POP		EBP									; stack pointer
 00000204  5F					POP		EDI									; location of converted array
 00000205  59					POP		ECX									; + / - 1
 00000206  59					POP		ECX									; loop counter

 00000207  8B 55 18				MOV		EDX, ERROR1 
 0000020A  E8 00000000 E			CALL	WriteString
 0000020F  E8 00000000 E			CALL	CrLf
 00000214  8B 55 14				MOV		EDX, ERROR2
 00000217  E8 00000000 E			CALL	WriteString
 0000021C  E8 00000000 E			CALL	CrLf

						; set up stack for another try
 00000221  55					PUSH	EBP										
 00000222  57					PUSH	EDI
 00000223  E9 FFFFFEF5				JMP		_enterValue

 00000228				_endProcedure:
 00000228  8B E5			mov		ESP, EBP
 0000022A  5D				pop		EBP
 0000022B  C2 0018			ret		24

 0000022E			ReadVal ENDP

				;_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
				; Name: calculate_sum

				; This procedure sums the integers that were converted from the user string and prints the sum along with a message to the user

				; Preconditions: All messages and arrays have been declared

				; Postconditions: Stack is cleared. The sum and a message is printed to the user

				; Receives: The address of the integers location, a prompt, and an offset to store the converted integer (when it's passed to WriteVal)

				; Returns: Nothing
				;_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 0000022E			calculate_sum PROC

 = [EBP + 16]				CONVERTED_STRING	EQU		[EBP + 16]
 = [EBP + 12]				SUM_RESULT_PROMPT	EQU		[EBP + 12]
 = [EBP + 8]				NUM_ARRAY			EQU		[EBP + 8]		; where the integers are

 0000022E  55	PUSH	EBP									; store stack frame reference
 0000022F  8B EC			MOV		EBP, ESP

 00000231  B9 0000000A			MOV		ECX, 10
 00000236  8B 7D 08			MOV		EDI, NUM_ARRAY
 00000239  B8 00000000			MOV		EAX, 0

 0000023E				_sumLoop:
 0000023E  03 07				ADD	EAX, [EDI]
 00000240  83 C7 04				ADD	EDI, 4
 00000243  E2 F9				LOOP	_sumLoop

 00000245  E8 00000000 E		CALL	CrLf
 0000024A  8B 55 0C			MOV		EDX, SUM_RESULT_PROMPT
 0000024D  E8 00000000 E		CALL	WriteString

 00000252  50				PUSH	EAX									; number to write
 00000253  8B 7D 10			MOV		EDI, CONVERTED_STRING		
 00000256  57				PUSH	EDI									; where to put converted string
					
 00000257  E8 00000006			CALL	WriteVal							; print the integer as a string

 0000025C  8B E5			MOV		ESP, EBP
 0000025E  5D				POP		EBP
 0000025F  C2 0010			RET		16

 00000262			calculate_sum ENDP
				;_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
				; Name: WriteVal

				; This procedure converts integers to strings and prints them to the screen

				; Preconditions: All messages and arrays have been declared

				; Postconditions: Stack is cleared. The integer has been converted to a string and printed to the screen

				; Receives: An integer to convert and an offset to store it in for WriteString

				; Returns: Nothing
				;_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 00000262			WriteVal PROC
					
 = [EBP + 12]				CONVERT_NUM		EQU	[EBP + 12]
 = [EBP + 8]				STORE_LOCATION	EQU	[EBP + 8]

 00000262  55				PUSH	EBP										; store stack frame reference
 00000263  8B EC			MOV		EBP, ESP

 00000265  8B 45 0C			MOV		EAX, CONVERT_NUM						; offset of where to put the converted string
 00000268  8B 7D 08			MOV		EDI, STORE_LOCATION						; nummber to convert

 0000026B  BB 0000000A			MOV		EBX, 10									
 00000270  83 F8 00			CMP		EAX, 0									; check if the number is negative
 00000273  7D 09			JGE		_divideLoop
 00000275  F7 D8			NEG		EAX										; make the negative number positive. The ABS of the value is needed, and a "-" will just be added on
 00000277  C7 45 FC			MOV		INT_SIGN_LOCAL, 1						; flag to add the negative sign if needed
	   00000001
				 
 0000027E				_divideLoop:
 0000027E  BA 00000000		 		MOV		EDX, 0
 00000283  F7 F3		 		DIV		EBX

 00000285  92			 		XCHG	EAX, EDX							; swap the quotient and the remainder
 00000286  04 30				ADD		AL, '0'


 00000288  88 07		 		MOV		[EDI], al							; saves the ascii digit
 0000028A  4F			 		DEC		EDI
 0000028B  92			 		XCHG	EAX, EDX							; swap the quotient and the remainder

 0000028C  41			 		INC		ECX
 0000028D  83 F8 00		 		CMP		EAX, 0					
 00000290  75 EC		 		JNZ		_divideLoop							; if the quotient isn't 0, we need to divide again

					; add negative sign if needed
 00000292  83 7D FC 01			CMP		INT_SIGN_LOCAL, 1						; 1 means the sign is negative
 00000296  75 05			JNE		_printString
 00000298  41				INC		ECX										; increment ECX to tell WriteString that there is 1 more character to print
 00000299  C6 07 2D			MOV		BYTE PTR[EDI], "-"
 0000029C  4F				DEC		EDI

				 	; print the string
 0000029D			 	_printString:
 0000029D  47					INC		EDI									; skip the sign bit (should be empty for a positive number)
						mDisplayString	EDI
 0000029E  52		     1		PUSH	EDX 
 0000029F  8B D7	     1		MOV		EDX,  EDI
 000002A1  E8 00000000 E     1		CALL	WriteString
 000002A6  5A		     1		POP		EDX
					
 000002A7  8B E5			MOV		ESP, EBP
 000002A9  5D				POP		EBP
 000002AA  C2 0008			RET		8

 000002AD			WriteVal ENDP
				;_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
				; Name: calculate_avg

				; This procedure calculates the average of the integers that were converted from the user string and prints the average along with a message to the user

				; Preconditions: All messages and arrays have been declared

				; Postconditions: Stack is cleared. The average and a message is printed to the user

				; Receives: The address of the integers location, a prompt, and an offset to store the converted integer (when it's passed to WriteVal)

				; Returns: Nothing
				;_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

 000002AD			calculate_avg PROC
 = [EBP + 16]				CONVERTED_STRING	EQU		[EBP + 16]
 = [EBP + 12]				AVG_RESULT_PROMPT	EQU		[EBP + 12]
 = [EBP + 8]				NUM_ARRAY			EQU		[EBP + 8]		; where the converted strings are

 000002AD  55				PUSH	EBP									; store stack frame reference
 000002AE  8B EC			MOV		EBP, ESP

 000002B0  E8 00000000 E		CALL	CrLf
 000002B5  8B 55 0C			MOV		EDX, AVG_RESULT_PROMPT
 000002B8  E8 00000000 E		CALL	WriteString

					; calculate average
 000002BD  B9 0000000A			MOV		ECX, 10
 000002C2  8B 7D 08			MOV		EDI, NUM_ARRAY
 000002C5  B8 00000000			MOV		EAX, 0

 000002CA				_sumLoop:
 000002CA  03 07				ADD	EAX, [EDI]
 000002CC  83 C7 04				ADD	EDI, 4
 000002CF  E2 F9				LOOP	_sumLoop
					
 000002D1  99				CDQ
 000002D2  BB 0000000A			MOV		EBX, 10
 000002D7  F7 FB			IDIV	EBX

 000002D9  50				PUSH	EAX									; number to write
 000002DA  8B 7D 10			MOV		EDI, CONVERTED_STRING		
 000002DD  57				PUSH	EDI									; where to put converted string
					
 000002DE  E8 FFFFFF7F			CALL	WriteVal

 000002E3  8B E5			MOV		ESP, EBP
 000002E5  5D				POP		EBP
 000002E6  C2 0010			RET		16

 000002E9			calculate_avg ENDP

				;_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
				; Name: print_results

				; This procedure works to print all 10 strings (that have since been converted to integers) to the console. 

				; Preconditions: All messages and arrays have been declared. 10 strings have been validated and converted to integers

				; Postconditions: Stack is cleared. The integer has been converted to a string and printed to the screen

				; Receives: A list of integers to print, a message to the user, a place to store each converted integer (for WriteVal), a local sign flag, and a print delimiter

				; Returns: Nothing
				;_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 000002E9			print_results PROC ; also prints out the list of what the user entered
 = [EBP + 24]				DELIMITER			EQU		[EBP + 24]				; comma to seperate printed values
 = [EBP + 20]				INT_SIGN			EQU		[EBP + 20]				; make shift sign flag		
 = [EBP + 16]				CONVERTED_STRING	EQU		[EBP + 16]				; string that holds the converted integer
 = [EBP + 12]				USER_MESSAGE		EQU		[EBP + 12]				; offset to result_prompt
 = [EBP + 8]				CONVERT_LIST		EQU		[EBP + 8]
					
 = DWORD PTR [EBP - 4]			INT_SIGN_LOCAL		EQU DWORD PTR [EBP - 4]

 000002E9  55				PUSH	EBP											; store stack frame reference
 000002EA  8B EC			MOV		EBP, ESP	

 000002EC  83 EC 04			SUB		ESP, 4										; make room for local variable
					
 000002EF  8B 5D 14			MOV		EBX, INT_SIGN
 000002F2  89 5D FC			MOV		INT_SIGN_LOCAL, EBX

					; print result message so the references stay ok
 000002F5  8B 55 0C			MOV		EDX, USER_MESSAGE
 000002F8  E8 00000000 E		CALL	WriteString
 000002FD  E8 00000000 E		CALL	CrLf

 00000302  8B 7D 08			MOV		EDI, CONVERT_LIST
 00000305  B9 0000000A			MOV		ECX, 10										; loop for printing

 0000030A				_printLoop:
 0000030A  51					PUSH	ECX
 0000030B  B9 00000000				MOV		ECX, 0									; counter for WriteString
 00000310  8B 07				MOV		EAX, [EDI]								; move number to convert to EAX
 00000312  57					PUSH	EDI										; save the address of the number being converted

 00000313  8B 7D 10				MOV		EDI, CONVERTED_STRING					; offset of where to put the converted string

 00000316  50					PUSH	EAX										; number to write
 00000317  8B 7D 10				MOV		EDI, CONVERTED_STRING		
 0000031A  57					PUSH	EDI										; where to put converted string
					
 0000031B  E8 FFFFFF42				CALL	WriteVal
					


 00000320  5F					POP		EDI
 00000321  59					POP		ECX

 00000322  83 F9 01				CMP		ECX, 1									; if it's the last item, don't print a comma
 00000325  75 02				JNE		_printComma
 00000327  EB 0A				JMP		_continue
 00000329					_printComma:
							mDisplayString	DELIMITER
 00000329  52		     1		PUSH	EDX 
 0000032A  8B 55 18	     1		MOV		EDX,  DELIMITER
 0000032D  E8 00000000 E     1		CALL	WriteString
 00000332  5A		     1		POP		EDX

 00000333					_continue:
 00000333  83 C7 04				ADD		EDI, 4
 00000336  E2 D2				LOOP	_printLoop

					; clean up stack
 00000338  8B E5			mov		ESP, EBP
 0000033A  5D				pop		EBP
 0000033B  C2 0008			ret		8

 0000033E			print_results ENDP

				;_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
				; Name: goodBye

				; This procedure prints a goodbye message to the user

				; Preconditions: A goodbye message has been declared

				; Postconditions: Stack is cleared. User has been given a farewell

				; Receives: The address of the goodbye message

				; Returns: Nothing
				;_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _s
 0000033E			say_goodbye PROC
 = [EBP + 8]				GOOD_BYE		EQU		[EBP + 8]
					
 0000033E  55				PUSH	EBP						; store stack frame reference
 0000033F  8B EC			MOV		EBP, ESP	
 00000341  8B 55 08			MOV		EDX, GOOD_BYE
 00000344  E8 00000000 E		CALL	WriteString
 00000349  E8 00000000 E		CALL	CrLF

					; clean up stack
 0000034E  8B E5			mov		ESP, EBP
 00000350  5D				pop		EBP
 00000351  C2 0004			ret		4

 00000354			say_goodbye ENDP


				END main
Microsoft (R) Macro Assembler Version 14.27.29112.0	    12/08/20 07:01:41
<Designing low-level I/O procedures      (Proj6-kinkades.asm  Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000276 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000354 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 00000110 _TEXT	Length= 0000011E Public STDCALL
  _enterValue  . . . . . . . . .	L Near	 0000011D _TEXT	
  _checkNegative . . . . . . . .	L Near	 0000013E _TEXT	
  _checkPositive . . . . . . . .	L Near	 0000014C _TEXT	
  _noSignIndicated . . . . . . .	L Near	 0000015A _TEXT	
  _conversionLoop  . . . . . . .	L Near	 0000017A _TEXT	
  _errorMessage  . . . . . . . .	L Near	 000001B8 _TEXT	
  _invalidCharacter  . . . . . .	L Near	 000001DE _TEXT	
  _overflow  . . . . . . . . . .	L Near	 00000203 _TEXT	
  _endProcedure  . . . . . . . .	L Near	 00000228 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 00000262 _TEXT	Length= 0000004B Public STDCALL
  _divideLoop  . . . . . . . . .	L Near	 0000027E _TEXT	
  _printString . . . . . . . . .	L Near	 0000029D _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
calculate_avg  . . . . . . . . .	P Near	 000002AD _TEXT	Length= 0000003C Public STDCALL
  _sumLoop . . . . . . . . . . .	L Near	 000002CA _TEXT	
calculate_sum  . . . . . . . . .	P Near	 0000022E _TEXT	Length= 00000034 Public STDCALL
  _sumLoop . . . . . . . . . . .	L Near	 0000023E _TEXT	
introduction . . . . . . . . . .	P Near	 000000B4 _TEXT	Length= 0000005C Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000B4 Public STDCALL
  _inputLoop . . . . . . . . . .	L Near	 00000028 _TEXT	
print_results  . . . . . . . . .	P Near	 000002E9 _TEXT	Length= 00000055 Public STDCALL
  _printLoop . . . . . . . . . .	L Near	 0000030A _TEXT	
  _printComma  . . . . . . . . .	L Near	 00000329 _TEXT	
  _continue  . . . . . . . . . .	L Near	 00000333 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
say_goodbye  . . . . . . . . . .	P Near	 0000033E _TEXT	Length= 00000016 Public STDCALL
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
AVG_RESULT_PROMPT  . . . . . . .	Text   	 [EBP + 12]
BUFFER . . . . . . . . . . . . .	Byte	 00000237 _DATA	
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CONVERTED_STRING . . . . . . . .	Text   	 [EBP + 16]
CONVERT_LIST . . . . . . . . . .	Text   	 [EBP + 8]
CONVERT_NUM  . . . . . . . . . .	Text   	 [EBP + 12]
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DELIMITER  . . . . . . . . . . .	Text   	 [EBP + 24]
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
ERROR1 . . . . . . . . . . . . .	Text   	 [EBP + 24]
ERROR2 . . . . . . . . . . . . .	Text   	 [EBP + 20]
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GOOD_BYE . . . . . . . . . . . .	Text   	 [EBP + 8]
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INSTRUCTION_1  . . . . . . . . .	Text   	 [EBP + 20]
INSTRUCTION_2  . . . . . . . . .	Text   	 [EBP + 16]
INSTRUCTION_3  . . . . . . . . .	Text   	 [EBP + 12]
INSTRUCTION_4  . . . . . . . . .	Text   	 [EBP + 8]
INTRO_1  . . . . . . . . . . . .	Text   	 [EBP + 28]
INTRO_2  . . . . . . . . . . . .	Text   	 [EBP + 24]
INT_SIGN_LOCAL . . . . . . . . .	Text   	 DWORD PTR [EBP - 4]
INT_SIGN . . . . . . . . . . . .	Text   	 [EBP + 20]
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LIST_OF_NUMBERS  . . . . . . . .	Text   	 [EBP + 28]
MAX_LENGTH . . . . . . . . . . .	Number	 0000001Eh   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
NUM_ARRAY  . . . . . . . . . . .	Text   	 [EBP + 8]
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
SIZEOF_STRING_BUFFER . . . . . .	Text   	 [EBP + 8]
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
STORE_LOCATION . . . . . . . . .	Text   	 [EBP + 8]
STRING_BUFFER  . . . . . . . . .	Text   	 [EBP + 12]
SUM_RESULT_PROMPT  . . . . . . .	Text   	 [EBP + 12]
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
USER_INSTRUCTION . . . . . . . .	Text   	 [EBP + 16]
USER_MESSAGE . . . . . . . . . .	Text   	 [EBP + 12]
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
avg_prompt . . . . . . . . . . .	Byte	 00000213 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
byteCount  . . . . . . . . . . .	DWord	 0000024C _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
enter_instruction  . . . . . . .	Byte	 00000159 _DATA	
error_message1 . . . . . . . . .	Byte	 00000178 _DATA	
error_message2 . . . . . . . . .	Byte	 000001BE _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 00000145 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
instruction1 . . . . . . . . . .	Byte	 00000057 _DATA	
instruction2 . . . . . . . . . .	Byte	 00000082 _DATA	
instruction3 . . . . . . . . . .	Byte	 000000CE _DATA	
instruction4 . . . . . . . . . .	Byte	 00000121 _DATA	
int_string . . . . . . . . . . .	Byte	 00000250 _DATA	
intro1 . . . . . . . . . . . . .	Byte	 00000000 _DATA	
intro2 . . . . . . . . . . . . .	Byte	 0000003D _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
red  . . . . . . . . . . . . . .	Number	 00000004h   
result_prompt  . . . . . . . . .	Byte	 000001D1 _DATA	
sign_indicator . . . . . . . . .	DWord	 0000026F _DATA	
spacer . . . . . . . . . . . . .	Byte	 00000273 _DATA	
sum_prompt . . . . . . . . . . .	Byte	 000001F5 _DATA	
user_input_array . . . . . . . .	Byte	 0000022C _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
