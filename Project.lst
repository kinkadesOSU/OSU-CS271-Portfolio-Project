Microsoft (R) Macro Assembler Version 14.27.29112.0	    12/06/20 07:23:26
<Designing low-level I/O procedures      (Proj6-kinkades.asm  Page 1 - 1


				TITLE Designing low-level I/O procedures      (Proj6-kinkades.asm)

				; Author: Sam Kinkade
				; Last Modified: December 3rd, 2020
				; OSU email address: kinkades@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: 6                 Due Date: December 6th, 2020
				; Description: This file takes 10 inputs from the user, validates them for size / number / sign, prints out the numbers, and returns the sum and average of them. 
				; This is accomplished via macros and without the aid of ReadInt, ReadDec, WriteInt, or WriteDec

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; (insert macro definitions here)

				; (insert constant definitions here)
 = 0000000C			MAX_LENGTH = 12 ; 10 digits + a sign + null terminator

 00000000			.data

				; (insert variable definitions here)
 00000000 50 52 4F 47 52	intro1						BYTE	"PROGRAMMING ASSIGNMENT 6: Designing low-level I/O procedures",0								; opening statement to user
	   41 4D 4D 49 4E
	   47 20 41 53 53
	   49 47 4E 4D 45
	   4E 54 20 36 3A
	   20 44 65 73 69
	   67 6E 69 6E 67
	   20 6C 6F 77 2D
	   6C 65 76 65 6C
	   20 49 2F 4F 20
	   70 72 6F 63 65
	   64 75 72 65 73
	   00
 0000003D 57 72 69 74 74	intro2						BYTE	"Written byte: Sam Kinkade",0
	   65 6E 20 62 79
	   74 65 3A 20 53
	   61 6D 20 4B 69
	   6E 6B 61 64 65
	   00

 00000057 50 6C 65 61 73	instruction1				BYTE	"Please provide 10 signed decimal integers.",0
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 73 69
	   67 6E 65 64 20
	   64 65 63 69 6D
	   61 6C 20 69 6E
	   74 65 67 65 72
	   73 2E 00
 00000082 45 61 63 68 20	instruction2				BYTE	"Each number needs to be small enough to fit inside a 32 bit register. After",0
	   6E 75 6D 62 65
	   72 20 6E 65 65
	   64 73 20 74 6F
	   20 62 65 20 73
	   6D 61 6C 6C 20
	   65 6E 6F 75 67
	   68 20 74 6F 20
	   66 69 74 20 69
	   6E 73 69 64 65
	   20 61 20 33 32
	   20 62 69 74 20
	   72 65 67 69 73
	   74 65 72 2E 20
	   41 66 74 65 72
	   00
 000000CE 79 6F 75 20 68	instruction3				BYTE	"you have finished inputting the raw numbers I will display a list of the integers,",0
	   61 76 65 20 66
	   69 6E 69 73 68
	   65 64 20 69 6E
	   70 75 74 74 69
	   6E 67 20 74 68
	   65 20 72 61 77
	   20 6E 75 6D 62
	   65 72 73 20 49
	   20 77 69 6C 6C
	   20 64 69 73 70
	   6C 61 79 20 61
	   20 6C 69 73 74
	   20 6F 66 20 74
	   68 65 20 69 6E
	   74 65 67 65 72
	   73 2C 00
 00000121 74 68 65 69 72	instruction4				BYTE	"their sum, and their average value.",0
	   20 73 75 6D 2C
	   20 61 6E 64 20
	   74 68 65 69 72
	   20 61 76 65 72
	   61 67 65 20 76
	   61 6C 75 65 2E
	   00
 00000145 54 68 61 6E 6B	goodbye						BYTE	"Thanks for playing!",0
	   73 20 66 6F 72
	   20 70 6C 61 79
	   69 6E 67 21 00

 00000159 50 6C 65 61 73	enter_instruction			BYTE	"Please enter a signed number: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   00
 00000178 45 52 52 4F 52	error_message1				BYTE	"ERROR: You did not enter a signed number, or your number was too big.",0
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 20 73 69 67
	   6E 65 64 20 6E
	   75 6D 62 65 72
	   2C 20 6F 72 20
	   79 6F 75 72 20
	   6E 75 6D 62 65
	   72 20 77 61 73
	   20 74 6F 6F 20
	   62 69 67 2E 00
 000001BE 50 6C 65 61 73	error_message2				BYTE	"Please try again: ",0
	   65 20 74 72 79
	   20 61 67 61 69
	   6E 3A 20 00

 000001D1 59 6F 75 20 65	result_prompt				BYTE	"You entered the following numbers: ",0
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 20
	   00
 000001F5 54 68 65 20 73	sum_prompt					BYTE	"The sum of these numbers is: ",0
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 20 00
 00000213 54 68 65 20 72	avg_prompt					BYTE	"The rounded average is: ",0
	   6F 75 6E 64 65
	   64 20 61 76 65
	   72 61 67 65 20
	   69 73 3A 20 00

 0000022C  0000000A [		user_input_array			BYTE	10 DUP(?),0
	    00
	   ] 00

				;-----------------CONVERT STRING TO INT-----------------
 00000237  0000000C [		input_accumulator			BYTE	MAX_LENGTH DUP(?)
	    00
	   ]
 00000243  00000015 [		BUFFER						BYTE	21 DUP(0)
	    00
	   ]
 00000258 00000000		byteCount					DWORD	?
				;result						DWORD	0	; make a local variable for final number to be saved

				;-----------------CONVERT INT TO STRING-----------------
 0000025C  0000000C [		int_string					BYTE	MAX_LENGTH DUP(?),0
	    00
	   ] 00
 00000269 30 31 32 33 34	char_list					BYTE	"0123456789ABCDEF"
	   35 36 37 38 39
	   41 42 43 44 45
	   46
 00000279 00000000		sign_indicator				DWORD	0						; need a boolean to tell us which sign the number is. Can't use the sign flag since it's controlled by the system. Assume it's a positive number to start (makes life easier)


 00000000			.code
 00000000			main PROC

				; (insert executable instructions here)
				; introduce the program to the user
 00000000  68 00000000 R	PUSH	offset	intro1
 00000005  68 0000003D R	PUSH	offset	intro2
 0000000A  68 00000057 R	PUSH	offset	instruction1
 0000000F  68 00000082 R	PUSH	offset	instruction2
 00000014  68 000000CE R	PUSH	offset	instruction3
 00000019  68 00000121 R	PUSH	offset	instruction4
 0000001E  E8 00000050		CALL	introduction


				; read in the user's value
				;PUSH	OFFSET	user_input_array
 00000023  68 00000178 R	PUSH	OFFSET	error_message1
 00000028  68 000001BE R	PUSH	OFFSET	error_message2
 0000002D  68 00000159 R	PUSH	OFFSET	enter_instruction
 00000032  68 00000243 R	PUSH	OFFSET	BUFFER
 00000037  6A 15		PUSH	SIZEOF	BUFFER
 00000039  E8 00000091		CALL	convert_string_to_int	

				;------------DELETE AT FINAL----------------------------------------
 0000003E  E8 00000000 E	Call	CrLf
 00000043  E8 00000000 E	Call	WriteInt ; test that the string is being converted properly
 00000048  E8 00000000 E	Call	CrLf
 0000004D  E8 00000000 E	Call	CrLf
				;------------DELETE AT FINAL----------------------------------------

				;PUSH	sign_indicator
 00000052  68 000001D1 R	PUSH	OFFSET result_prompt
 00000057  50			PUSH	EAX							; has number to convert
 00000058  E8 00000112		CALL	convert_int_to_string

				; calculate results


				;say goodbye
 0000005D  68 00000145 R	PUSH	offset	goodbye
 00000062  E8 00000172		CALL	say_goodbye
 00000067  E8 00000000 E	CALL	CrLf
					Invoke ExitProcess,0	; exit to operating system
 0000006C  6A 00	   *	    push   +000000000h
 0000006E  E8 00000000 E   *	    call   ExitProcess
 00000073			main ENDP

				; (insert additional procedures here)
 00000073			introduction PROC
 = [EBP + 28]				INTRO_1				EQU		[EBP + 28]
 = [EBP + 24]				INTRO_2				EQU		[EBP + 24]
 = [EBP + 20]				INSTRUCTION_1		EQU		[EBP + 20]
 = [EBP + 16]				INSTRUCTION_2		EQU		[EBP + 16]
 = [EBP + 12]				INSTRUCTION_3		EQU		[EBP + 12]
 = [EBP + 8]				INSTRUCTION_4		EQU		[EBP + 8]

 00000073  55				PUSH	EBP						; store stack frame reference
 00000074  8B EC			MOV		EBP, ESP		
 00000076  8B 55 1C			MOV		EDX, INTRO_1
 00000079  E8 00000000 E		CALL	WriteString
 0000007E  E8 00000000 E		CALL	CrLf
 00000083  8B 55 18			MOV		EDX, INTRO_2
 00000086  E8 00000000 E		CALL	WriteString
 0000008B  E8 00000000 E		CALL	CrLf
 00000090  E8 00000000 E		CALL	CrLf
 00000095  8B 55 14			MOV		EDX, INSTRUCTION_1
 00000098  E8 00000000 E		CALL	WriteString
 0000009D  E8 00000000 E		CALL	CrLf
 000000A2  8B 55 10			MOV		EDX, INSTRUCTION_2
 000000A5  E8 00000000 E		CALL	WriteString
 000000AA  E8 00000000 E		CALL	CrLf
 000000AF  8B 55 0C			MOV		EDX, INSTRUCTION_3
 000000B2  E8 00000000 E		CALL	WriteString
 000000B7  E8 00000000 E		CALL	CrLf
 000000BC  8B 55 08			MOV		EDX, INSTRUCTION_4
 000000BF  E8 00000000 E		CALL	WriteString
 000000C4  E8 00000000 E		CALL	CrLf

					; clean up stack
 000000C9  8B E5			mov		ESP, EBP
 000000CB  5D				pop		EBP
 000000CC  C2 0018			ret		24

 000000CF			introduction ENDP

 000000CF			convert_string_to_int PROC

					;LIST_OF_NUMBERS				EQU [EBP + 28]
 = [EBP + 24]				ERROR1						EQU [EBP + 24]
 = [EBP + 20]				ERROR2						EQU	[EBP + 20]
 = [EBP + 16]				USER_INSTRUCTION			EQU [EBP + 16]
 = [EBP + 12]				STRING_BUFFER				EQU [EBP + 12]
 = [EBP + 8]				SIZEOF_STRING_BUFFER		EQU [EBP + 8]

 000000CF  55				PUSH	EBP						; store stack frame reference
 000000D0  8B EC			MOV		EBP, ESP
 000000D2  55				PUSH	EBP

					; give the user some instructions
 000000D3  8B 55 10			MOV		EDX, USER_INSTRUCTION
 000000D6  E8 00000000 E		CALL	WriteString

 000000DB				_enterValue:
 000000DB  8B 55 0C				MOV		EDX, STRING_BUFFER
 000000DE  8B 4D 08				MOV		ECX, SIZEOF_STRING_BUFFER
 000000E1  E8 00000000 E			CALL	ReadString					; gets the user's number as a string (need to convert to an int)
 000000E6  8B C8				MOV		ECX, EAX					; moves y into ECX for the conversion steps
 000000E8  8B 75 0C				MOV		ESI, STRING_BUFFER			; moves the string to ESI so LODSB can iterate through it

						; convert string to int
 000000EB  AC					LODSB								; puts a byte in AL
 000000EC  8A D0				MOV		dl, al						; preserve the character so we can use EAX later
 000000EE  BD 00000001				MOV		EBP, 1						; assume the number is positive to begin with. Logic get's complicated to have the default later on	
						
 000000F3					_checkNegative:
 000000F3  80 FA 2D					CMP		dl, '-'
 000000F6  75 09					JNE		_checkPositive
 000000F8  BD FFFFFFFF					MOV		EBP, -1

 000000FD  AC						LODSB							; load the next digit
 000000FE  8A D0					MOV		dl, al					; preserve the character so we can use EAX later
 00000100  49						DEC		ECX						; ECX would've had the length of the digit plus 1 for the sign. We need to ignore that
						
 00000101					_checkPositive:
 00000101  80 FA 2B					CMP		dl, "+"
 00000104  75 09					JNE		_noSignIndicated		; assume the number is positive if the user didn't specify
 00000106  BD 00000001					MOV		EBP, 1				
							
 0000010B  AC						LODSB							; load the next digit
 0000010C  8A D0					MOV		dl, al					; preserve the character so we can use EAX later
 0000010E  49						DEC		ECX						; ECX would've had the length of the digit plus 1 for the sign. We need to ignore that
						
 0000010F					_noSignIndicated:
 0000010F  80 FA 30					CMP		dl, '0'
 00000112  72 3B					JB		_errorMessage
 00000114  80 FA 39					CMP		dl, '9'
 00000117  77 36					JA		_errorMessage

 00000119  58						POP		EAX						; get the stack pointer off the stack
 0000011A  55						PUSH	EBP						; +/- 1
 0000011B  8B E8					MOV		EBP, EAX

 0000011D  55						PUSH	EBP						; has our stack pointer, but is also being used for the calculation
 0000011E  BD 00000000					MOV		EBP, 0					; use EBP for calc because EAX is locked up
 00000123  B8 00000000					MOV		EAX, 0
 00000128  BB 0000000A					MOV		EBX, 10

 0000012D					_conversionLoop:
							; passes all checks, so we can convert the character to a digit
 0000012D  83 E2 0F					AND		EDX, 0Fh
 00000130  52						PUSH	EDX							; save EDX because IMUL messes with it
 00000131  8B C5					MOV		EAX, EBP
 00000133  F7 EB					IMUL	EBX							; EAX = EAX * EBX
 00000135  5A						POP		EDX							; bring EDX back
						
 00000136  70 17					JO		_errorMessage
 00000138  8B E8					MOV		EBP, EAX
 0000013A  03 EA					add		EBP, EDX
 0000013C  70 11					JO		_errorMessage
 0000013E  AC						LODSB								; load character to al
 0000013F  8A D0					MOV		dl, al						; LODSB puts the byte in al, but the loop uses EDX, so the byte needs to be in dl
 00000141  E2 EA					LOOP		_conversionLoop

						;MOV		EDI, LIST_OF_NUMBERS				; offset to address of array that will hold the ten
 00000143  8B C5				MOV		EAX, EBP							; EBP has been holding the result, but EAX will need it for WriteInt
						;STOSB										; stores the byte. USES EDI!!!!!!!!!
						
 00000145  5D					POP		EBP									; EBP has the old stack pointer value	
 00000146  8B FD				MOV		EDI, EBP							; preserve it because EDI is going to be used
 00000148  5D					POP		EBP									; EBP should have the +/- 1
 00000149  F7 ED				IMUL	EBP									; EAX * EBP ( +/- 1)
 0000014B  8B EF				MOV		EBP, EDI							; restore stack pointer to EBP
 0000014D  EB 1A				JMP		_endProcedure

 0000014F				_errorMessage:
					; print error message
 0000014F  8B 55 18				MOV		EDX, ERROR1
 00000152  E8 00000000 E			CALL	WriteString
 00000157  E8 00000000 E			CALL	CrLf
 0000015C  8B 55 14				MOV		EDX, ERROR2
 0000015F  E8 00000000 E			CALL	WriteString
 00000164  E9 FFFFFF72				JMP		_enterValue

 00000169				_endProcedure:
 00000169  8B E5			mov		ESP, EBP
 0000016B  5D				pop		EBP
 0000016C  C2 0014			ret		20

 0000016F			convert_string_to_int ENDP


 0000016F			convert_int_to_string PROC
					;INT_SIGN			EQU		[EBP + 16]
 = [EBP + 12]				USER_MESSAGE		EQU		[EBP + 12]
 = [EBP + 8]				NUMBER_TO_CONVERT	EQU		[EBP + 8]
					
					LOCAL INT_SIGN_LOCAL:DWORD

 0000016F  55		   *	    push   ebp
 00000170  8B EC	   *	    mov    ebp, esp
 00000172  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 00000175  55				PUSH	EBP						; store stack frame reference
 00000176  8B EC			MOV		EBP, ESP	

					;MOV		EAX, INT_SIGN
					;MOV		INT_SIGN_LOCAL, EAX

 00000178  B8 00000000			MOV		EAX, 0					; clear EAX to test that it's being passed properly

					; set up various registers
 0000017D  B9 00000000			MOV		ECX, 0
 00000182  BF 0000025C R		MOV		EDI, offset int_string
 00000187  83 C7 0B			ADD		EDI, (MAX_LENGTH - 1)
 0000018A  BB 0000000A			MOV		EBX, 10
 0000018F  8B 45 08			MOV		EAX, NUMBER_TO_CONVERT				


 00000192  0B C0			OR		EAX, EAX
 00000194  79 09			JNS		_divideLoop
 00000196  F7 D8			NEG		EAX						; make the negative number positive
 00000198  C7 45 FC			MOV		INT_SIGN_LOCAL, 1
	   00000001



 0000019F				_divideLoop:
 0000019F  BA 00000000				MOV		EDX, 0
 000001A4  F7 F3				DIV		EBX

 000001A6  92					XCHG	EAX, EDX						; swap the quotient and the remainder
 000001A7  53					PUSH	EBX
 000001A8  BB 00000269 R			MOV		EBX, offset char_list
 000001AD  D7					XLAT									; looks up the ASCII value from the char_list in EAX
 000001AE  5B					POP		EBX

 000001AF  AA					STOSB									; saves the ascii digit
 000001B0  4F					DEC		EDI								; decrement EDI because STOSB automatically increments it
 000001B1  4F					DEC		EDI								; decrement again to point to the correct memory address
 000001B2  92					XCHG	EAX, EDX						; swap the quotient and the remainder

 000001B3  41					INC		ECX
 000001B4  0B C0				OR		EAX, EAX					
 000001B6  75 E7				JNZ		_divideLoop						; if the quotient isn't 0, we need to divide again

					; print user message
 000001B8  8B 55 0C			MOV		EDX, USER_MESSAGE
 000001BB  E8 00000000 E		CALL	WriteString

					; print the string
 000001C0  47				INC		EDI
 000001C1  8B D7			MOV		EDX, EDI
 000001C3  E8 00000000 E		CALL	WriteString
 000001C8  E8 00000000 E		CALL	CrLf
 000001CD  E8 00000000 E		CALL	CrLf

					; clean up stack
 000001D2  8B E5			mov		ESP, EBP
 000001D4  5D				pop		EBP
 000001D5  C9		   *	    leave  
 000001D6  C2 0008			ret		8

 000001D9			convert_int_to_string ENDP

 000001D9			say_goodbye PROC
 = [EBP + 8]				GOOD_BYE		EQU		[EBP + 8]
					
 000001D9  55				PUSH	EBP						; store stack frame reference
 000001DA  8B EC			MOV		EBP, ESP	
 000001DC  8B 55 08			MOV		EDX, GOOD_BYE
 000001DF  E8 00000000 E		CALL	WriteString
 000001E4  E8 00000000 E		CALL	CrLF

					; clean up stack
 000001E9  8B E5			mov		ESP, EBP
 000001EB  5D				pop		EBP
 000001EC  C2 0004			ret		4

 000001EF			say_goodbye ENDP


				END main
Microsoft (R) Macro Assembler Version 14.27.29112.0	    12/06/20 07:23:26
<Designing low-level I/O procedures      (Proj6-kinkades.asm  Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000027D Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001EF Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
convert_int_to_string  . . . . .	P Near	 0000016F _TEXT	Length= 0000006A Public STDCALL
  INT_SIGN_LOCAL . . . . . . . .	DWord	 bp - 00000004
  _divideLoop  . . . . . . . . .	L Near	 0000019F _TEXT	
convert_string_to_int  . . . . .	P Near	 000000CF _TEXT	Length= 000000A0 Public STDCALL
  _enterValue  . . . . . . . . .	L Near	 000000DB _TEXT	
  _checkNegative . . . . . . . .	L Near	 000000F3 _TEXT	
  _checkPositive . . . . . . . .	L Near	 00000101 _TEXT	
  _noSignIndicated . . . . . . .	L Near	 0000010F _TEXT	
  _conversionLoop  . . . . . . .	L Near	 0000012D _TEXT	
  _errorMessage  . . . . . . . .	L Near	 0000014F _TEXT	
  _endProcedure  . . . . . . . .	L Near	 00000169 _TEXT	
introduction . . . . . . . . . .	P Near	 00000073 _TEXT	Length= 0000005C Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000073 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
say_goodbye  . . . . . . . . . .	P Near	 000001D9 _TEXT	Length= 00000016 Public STDCALL
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BUFFER . . . . . . . . . . . . .	Byte	 00000243 _DATA	
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
ERROR1 . . . . . . . . . . . . .	Text   	 [EBP + 24]
ERROR2 . . . . . . . . . . . . .	Text   	 [EBP + 20]
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GOOD_BYE . . . . . . . . . . . .	Text   	 [EBP + 8]
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INSTRUCTION_1  . . . . . . . . .	Text   	 [EBP + 20]
INSTRUCTION_2  . . . . . . . . .	Text   	 [EBP + 16]
INSTRUCTION_3  . . . . . . . . .	Text   	 [EBP + 12]
INSTRUCTION_4  . . . . . . . . .	Text   	 [EBP + 8]
INTRO_1  . . . . . . . . . . . .	Text   	 [EBP + 28]
INTRO_2  . . . . . . . . . . . .	Text   	 [EBP + 24]
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAX_LENGTH . . . . . . . . . . .	Number	 0000000Ch   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMBER_TO_CONVERT  . . . . . . .	Text   	 [EBP + 8]
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
SIZEOF_STRING_BUFFER . . . . . .	Text   	 [EBP + 8]
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
STRING_BUFFER  . . . . . . . . .	Text   	 [EBP + 12]
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
USER_INSTRUCTION . . . . . . . .	Text   	 [EBP + 16]
USER_MESSAGE . . . . . . . . . .	Text   	 [EBP + 12]
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
avg_prompt . . . . . . . . . . .	Byte	 00000213 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
byteCount  . . . . . . . . . . .	DWord	 00000258 _DATA	
char_list  . . . . . . . . . . .	Byte	 00000269 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
enter_instruction  . . . . . . .	Byte	 00000159 _DATA	
error_message1 . . . . . . . . .	Byte	 00000178 _DATA	
error_message2 . . . . . . . . .	Byte	 000001BE _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 00000145 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
input_accumulator  . . . . . . .	Byte	 00000237 _DATA	
instruction1 . . . . . . . . . .	Byte	 00000057 _DATA	
instruction2 . . . . . . . . . .	Byte	 00000082 _DATA	
instruction3 . . . . . . . . . .	Byte	 000000CE _DATA	
instruction4 . . . . . . . . . .	Byte	 00000121 _DATA	
int_string . . . . . . . . . . .	Byte	 0000025C _DATA	
intro1 . . . . . . . . . . . . .	Byte	 00000000 _DATA	
intro2 . . . . . . . . . . . . .	Byte	 0000003D _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
red  . . . . . . . . . . . . . .	Number	 00000004h   
result_prompt  . . . . . . . . .	Byte	 000001D1 _DATA	
sign_indicator . . . . . . . . .	DWord	 00000279 _DATA	
sum_prompt . . . . . . . . . . .	Byte	 000001F5 _DATA	
user_input_array . . . . . . . .	Byte	 0000022C _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
